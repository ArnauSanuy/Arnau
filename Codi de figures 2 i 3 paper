import numpy as np
import matplotlib.pyplot as plt
import math


# Constants basiques
alpha = 0.3
beta = 0.5
c1 = 0.5
c3 = 0.3
delta = 0.0005
f= 1

# Valors diferents per poder calcular xm i theta
Ac1 = np.linspace(0.94,1.4,51)
Ac2 = np.linspace(0.96,1.3,51)
e = 1
B = 1
c = 3e10
me = 510998.95/(c**2)
vb = ((e*B)/(2*math.pi*me*c))
#print(vb)
#k = 8.617333262*10**(-5)
kTe = np.linspace(50000, 1000000, 51)
k = 1.380649
theta = kTe/(me*c**2)
#print(theta)
v = np.logspace(12,21,51)
logv = []
xm = ((2*v)/(3*vb*theta**2))
#print(xm)

for i in range(51):
    info = math.log10(v[i])
    logv.append(info)


# 3 casos diferents segons quin alphac tenim o derivada de massa
rmin = 3
rmax = 1000
m = [10, 1e5, 1e7, 1e9]
mp1 = np.linspace(9*10**(-5), 1*10**(-7),51)
#print(mp1)
mp2 = np.linspace(3*10**(-4), 1*10**(-4),51)
mp3 = np.linspace(1*10**(-4), 8*10**(-3),51)
tau1 = (23.87*mp1)*(alpha/0.3)**(-1)*(c1/0.5)**(-1)*(rmin/3)**(-1/2)
tau2 = (23.87*mp2)*((alpha/0.3)**(-1))*((c1/0.5)**(-1))*((rmin/3)**(-1/2))
tau3 = (23.87*mp3)*(alpha/0.3)**(-1)*(c1/0.5)**(-1)*(rmin/3)**(-1/2)
alphac1 = np.linspace(1.01,10,51)
alphac2 = np.linspace(0.50,1,51)
alphac3 = np.linspace(1.01,10,51)
mp = np.linspace(0.01,1*10**(-8),51)
#print(mp)

g = ((2/math.pi)**(1/2))*(1/theta**(1/2))*(2+2*theta+1/theta)

F1 = []
F2 = []


for i in range(0,25):
    cas = 4*((2*theta[i]/math.pi**3)**(1/2))*(1+1.781*theta[i]**(1.34))+1.73*(theta[i]**(3/2))*(1+1.1*theta[i]+(theta[i]**2)-1.25*theta[i]**(5/2))
    F1.append(cas)

for i in range(25,51):
    cas = (9*theta[i]/(2*math.pi))*(math.log(1.123*theta[i]+0.48)+1.5)+2.3*theta[i]*(math.log(1.123*theta[i])+1.28)
    F2.append(cas)


F = F1+F2

gamma = []

for i in range(51):
    info = ((1.2e38*g[i]*c3*beta*mp1[i])/((alpha**2)*(c1**2)*rmin))+delta*(9.39e38)*(c3/rmin)*((1-beta)/f)-((4.78e34)*math.log(rmax/rmin)*F[i]*mp1[i])/((alpha**2)*(c1**2))
    gamma.append(info)

#print(gamma)

#--------------------------------

alphac = []
Qemes = []
T = np.linspace(0.01,15,51)
bona_theta = (1e9*k)/(me*c**2)
calcul = bona_theta*T
# print(calcul)


for i in range(51):
    info = (-math.log(23.87*mp[i]))/(math.log(1+((4e9*k*T[i])/(me*c**2))+16*((1e9*k*T[i])/(me*c**2))**2))
    alphac.append(info)

#print(alphac)
g_Te = (((2*me*c**2)/(math.pi*1e9*k*T))**(1/2))*(2+(2e9*k*T)/(me*c**2)+(me*c**2)/(1e9*k*T))

#print(g_Te)


#Aquí és on començen a apareixer les masses
for i in range(51):
    info = 1.2e38*g_Te[i]*(alpha**(-2))*(c1**(-2))*c3*beta*(mp[i]**(2))*(rmin**(-3))+delta*9.39e38*((1-beta)/f)*c3*m[0]*mp[i]*(rmin**(-1))
    Qemes.append(info)

print(Qemes)

F_total = []


#Per les Fs no hi ha masses, tot és en general
for i in range(51):
    if T[i] < 1/bona_theta:
        cas1 = 4*((2*T[i]*bona_theta/math.pi**3)**(1/2))*(1+1.781*(T[i]*bona_theta)**(1.34))+1.73*((T[i]*bona_theta)**(3/2))*(1+1.1*(T[i]*bona_theta)+((T[i]*bona_theta)**2)-1.25*(T[i]*bona_theta)**(5/2))
        F_total.append(cas1)
    if T[i] > 1/bona_theta:
        cas2 = (9*T[i]*bona_theta/(2*math.pi))*(math.log(1.123*T[i]*bona_theta+0.48)+1.5)+2.3*T[i]*bona_theta*(math.log(1.123*T[i]*bona_theta)+1.28)
        F_total.append(cas2)


#print(F_total)
# F1_Te = []
# F2_Te = []


# for i in range(0,25):
#     cas = 4*((2*T[i]*bona_theta/math.pi**3)**(1/2))*(1+1.781*(T[i]*bona_theta)**(1.34))+1.73*((T[i]*bona_theta)**(3/2))*(1+1.1*(T[i]*bona_theta)+((T[i]*bona_theta)**2)-1.25*(T[i]*bona_theta)**(5/2))
#     F1_Te.append(cas)

# for i in range(25,51):
#     cas = (9*T[i]*bona_theta/(2*math.pi))*(math.log(1.123*T[i]*bona_theta+0.48)+1.5)+2.3*T[i]*bona_theta*(math.log(1.123*T[i]*bona_theta)+1.28)
#     F2_Te.append(cas)


# F_total = F1_Te + F2_Te
# print(F_total)
llista_patata = []

#Aquí tornen a apareixer les masses
vp = 1.6898e14*(((1-beta)*c3*mp)/(alpha*c1*m[0]))**(1/2)*xm*(rmin**(-5/4))*T
#print(vp)


for i in range(51):
    patata = 4.78e34*(alpha**(-2))*(c1**(-2))*math.log(rmax/rmin)*F_total[i]*m[0]*(mp[i]**2)+5.3e35*((xm[i]/1000)**3)*(T[i]**7)*(m[0]**(1/2))*(mp[i]**(3/2))*(1+(1/(0.71*(1-alphac[i])))*((((6.2e19*T[i])/vp[i])**(1-alphac[i]))-1))
    llista_patata.append(patata)

#print(llista_patata)
#igualtat = 4.78e34*(alpha**(-2))*(c1**(-2))*math.log(rmax/rmin)*F_total*m[0]*(mp**2)+5.3e35*((xm/1000)**3)*(T**7)*(m[0]**(1/2))*(mp**(3/2))*(1+(1/(0.71*(1-alphac)))*((((6.2e19*T)/vp)**(1-alphac))-1))


llista_T = []
llista_mp = []

igualtat = []

for i in range(51):
    cas = 4.78e34*(alpha**(-2))*(c1**(-2))*math.log(rmax/rmin)*F_total[i]*m[0]*(mp[i]**2)+5.3e35*((xm[i]/1000)**3)*(T[i]**7)*(m[0]**(1/2))*(mp[i]**(3/2))*(1+(1/(0.71*(1-alphac[i])))*((((6.2e19*T[i])/vp[i])**(1-alphac[i]))-1))
    igualtat.append(cas)

print(igualtat)

for i in range(51):
    if 4.78e34*(alpha**(-2))*(c1**(-2))*math.log(rmax/rmin)*F_total[i]*m[0]*(mp[i]**2)+5.3e35*((xm[i]/1000)**3)*(T[i]**7)*(m[0]**(1/2))*(mp[i]**(3/2))*(1+(1/(0.71*(1-alphac[i])))*((((6.2e19*T[i])/vp[i])**(1-alphac[i]))-1)) == Qemes[i]:
        llista_T.append(T[i])

print(llista_T)

# plt.plot(logMp3, nova_alpha3)
# plt.xlabel('$\nu$ Hz')
# plt.ylabel('$\dfrac{Te}{10^9}$')
# plt.title('Relacio temperatures')
# plt.legend()
# plt.show()
